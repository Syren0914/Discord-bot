import google.generativeai as genai
import os
import random

techTitles = [
  "🧩 APL: Unlocking the Power of Symbols in Programming!",
  "🔥 Forth: The Language That’s All Stack, No Fluff",
  "🌐 Smalltalk: The Birthplace of Object-Oriented Magic",
  "⚡ J - The Minimalist’s Mathematical Playground",
  "🦾 COBOL - The Hidden Language Powering Finance",
  "🔍 Erlang: The Language That Never Crashes",
  "🎲 Factor: Stack-Based Code, Real-World Impact",
  "🧬 OCaml: Where Functional Meets Practical",
  "🚀 Ada: The Language Built for Space and Safety",
  "🌀 Prolog: Logic-Driven AI from the ’70s!",
  "🔮 Tcl - Simple Syntax, Powerful Results",
  "💡 Nim: The Speed of C with Modern Magic",
  "🌈 Racket: The Language of Beautiful Syntax",
  "📊 APL: Mathematical Notation Meets Code",
  "🧙 Haskell: The Wizardry of Pure Functions",
  "🛠️ PostScript: The Language Behind the Print",
  "🎨 LISP - Code That Thinks for Itself",
  "🌐 Eiffel: Contracts for Rock-Solid Code",
  "🧩 J: The Array Language for Hardcore Coders",
  "🔄 Elixir: Scalable Magic for Modern Systems",
  "📚 ALGOL: The Ancestor of All Modern Code",
  "🧠 Idris: Where Types Meet Logic",
  "🔹 Icon: Programming for Pattern Matching",
  "💾 PL/I: The Grandparent of Business Languages",
  "📜 AWK: The Language Hidden in Plain Sight",
  "🧩 Datalog: Rule-Based Logic in a Tiny Package",
  "🖥️ X10: Concurrency Made (Almost) Simple",
  "🛡️ Rust: Safety at the Core",
  "🔗 SML - The Origin of Type-Driven Development",
  "⚙️ Red: From Scripting to Full Applications",
  "🌌 Io: The Minimal Language with Infinite Potential",
  "📐 Simula: The First Steps Toward OOP",
  "⚛️ Chapel: Scaling Up for Supercomputing",
  "🌀 K: Extreme Efficiency in a Single Character",
  "🔗 Nix: The Language for Reliable System Configurations",
  "⚙️ Lisp Machines: Hardware for Code That Evolves",
  "💫 BCPL: The Language Before C",
  "🔍 Mercury: Logic Programming on Steroids",
  "🔋 Occam: Parallel Processing from the '80s",
  "🛠 Turing: An Uncommon Language for Uncommon Minds",
  "🌊 Bash: Mastering the Command Line's Hidden Powers",
  "🎯 Elm: A Functional Approach to Frontend",
  "🧪 ML: The Birthplace of Type Inference",
  "🔧 Fantom: Bridging JVM, .NET, and JavaScript",
  "🎉 Crystal: Ruby’s Speedier Twin",
  "🕹 VHDL: Language of Digital Logic",
  "🔗 Sed - The Stream Editor that Powers Scripts",
  "🌍 REXX: An Easy Scripting Language for Everyone",
  "🚀 Falcon: The Multi-Paradigm Powerhouse",
  "📐 Modula-2: Simplicity in System Design",
  "🌱 Dylan: Functional Meets Object-Oriented",
  "💡 Joy: Stack-Based Thinking for Logic",
  "📉 IDL: Visualizing Data with Code",
  "🔒 Pike: Network-Driven Development",
  "🖥️ Befunge: A Language that Breaks All Rules",
  "🧬 CLU: Data Abstraction Pioneer",
  "🔄 Icon: Pattern Matching for Text Wizards",
  "🏗️ LFE (Lisp-Flavored Erlang): BEAM Meets Lisp",
  "🧩 Q: High-Performance Query Language",
  "📜 APL for Finance: Symbols that Move Markets",
  "🌀 Xtend: Java, but Better",
  "🌈 PureScript: Functional Frontend for JavaScript",
  "📡 Zig: Control Meets Memory Safety",
  "🧙 Refal: Pattern Matching for Algorithms",
  "🔧 Hack: PHP Reimagined",
  "🧬 Nemerle: Meta-programming Made Simple",
  "🐉 RPG: The Business Language of Legends",
  "🔹 Janus: Where Concurrent Meets Constraint-Based",
  "📜 KRL: Rules that Define the Internet of Things",
  "🎩 Self: Prototype-Based Power",
  "🧬 SASL: The Language That Pioneered Lazy Evaluation",
  "🧩 PicoLisp: Minimalism Meets Practicality",
  "🔋 FORTH: Old-School Power for New-Age Devices",
  "🧠 Brainfuck: Code Simplified to the Extreme",
  "🚀 SuperCollider: Coding for Sound and Synthesis",
  "🎭 REBOL: A Language for Digital Sculptors",
  "🔧 Bourne Shell: The Original Unix Power Tool",
  "🌌 BitC: Security Meets System-Level Design",
  "📐 TADS: The Language Behind Interactive Fiction",
  "🌍 INTERCAL: The Language That Defies Logic",
  "⚙️ ML/I: Macro Power Before Macros Were Cool",
  "🔄 Nial: A Nested Interactive Array Language",
  "🎮 Racket: Functional Fun with Graphical Power",
  "🧩 Eiffel: Engineering Software with Confidence",
  "🌀 XSLT: Transforming XML with Style",
  "🌍 QPL: The Quantum Programming Language",
  "🧭 Clean: Purity for Real-World Applications",
  "🔍 SNOBOL: Pattern Matching, Old-School Style",
  "⚛️ PEARL: Real-Time Programming for Automation",
  "🖥️ SPARK Ada: Where Security and Safety Merge",
  "📊 S-Lang: Scripting for System Utilities",
  "🏗️ Hop: JavaScript with Built-In Concurrency",
  "🔹 Io: The Prototype-Based Language with Attitude",
  "🎨 Pony: Actor-Based for Safe Concurrency",
  "🧠 BCPL: The Predecessor to C with Attitude",
  "🐚 Tcsh: Customizable Command-Line Power",
  "⚡ Red: A Full Stack in One Compact Language",
  "📐 GAMS: Mathematical Modeling Made Simple",
  "🔌 Wren: Small, Fast, and Friendly for Embedding",
  "📜 LOLCODE: For When Code Speaks Meme",
  "🎛️ Icon: The Language of High-Level Goals",
  "🧩 TAO: The Versatile Object Database Language",
  "🎓 Maude: Rewriting Logic for Formal Modeling",
  "🧪 XQuery: Querying XML with Precision",
  "🔮 JCL: The Language of Job Control on Mainframes",
  "🧬 AdaCore: Reliable Software for Aerospace",
  "🛠️ ATS: Type-Safe and Performance-Oriented",
  "🔧 Ring: Multi-Paradigm Language for the Web",
  "🧙 Squeak: The Fun Side of Smalltalk",
  "🎩 Oz: Concurrent Programming Made Elegant",
  "🌐 OpenCL: Cross-Platform Code for GPUs",
  "🖥️ ALGOL 68: The Language That Shaped Modern Syntax",
  "🔎 AKL: The Andorra Kernel Language for AI",
  "🧩 Poplog: A Multipurpose Logic Programming Language",
  "⚙️ ZPL: High-Performance Parallel Arrays",
  "🧩 KRL: A Rules Engine for Real-World IoT",
  "🌈 Rascal: Language Design for Domain-Specific Needs",
  "💻 Datalog: A Logic-Based Database Query Language",
  "🔍 Joy: Functional Programming in a Stack Language",
  "🧠 TXL: Transforming Code through Grammar Rules"
  "🌀 Haxe: The Cross-Platform Language That Does It All!",
  "🎭 Idris: The Language Where Types and Logic Meet",
  "🌈 Fantom: The Multi-Platform Marvel",
  "🛠️ NekoVM: A Tiny, Cross-Platform Virtual Machine",
  "🧬 Kaya: Functional Meets Imperative in Harmony",
  "🔧 Pike: The Internet-Ready Language",
  "📐 Scratch: Visual Coding for All Ages!",
  "🎮 Haxe: One Language, Any Platform",
  "🌍 OpenCL: Writing Once, Running Everywhere",
  "🧩 Simula: The Language that Started OOP",
  "⚙️ JOVIAL: Military-Grade Programming Power",
  "🔮 TXL: Transforming Code with Grammar Rules",
  "🧠 Euphoria: Simple Yet Powerful Scripting",
  "🔌 Sather: Inspired by Eiffel, Built for Real-World Use",
  "🏗️ Geneva: Declarative Logic for Events and Actions",
  "🧩 K: Fast and Compact for Data Manipulation",
  "🔹 Factor: High-Level Power in a Stack Language",
  "🌌 Neko: Lightweight Language for the Haxe Ecosystem",
  "🧠 Alice ML: Functional Programming with a Twist",
  "💡 Focal: The 1970s Answer to Better Programming",
  "🎨 Pure Data: Visual Programming for Sound and Art",
  "🛡️ Safe C: Making C Code Secure",
  "🔍 LFE: Lisp Meets Erlang's Concurrency",
  "🐉 Scala Native: High-Performance Scala",
  "⚡ Janus: Logic and Concurrent Programming Combined",
  "🌍 ChucK: Real-Time Sound Synthesis with Code",
  "🎩 Curl: A Language for Interactive Web Content",
  "🌐 Gosu: A Language Built for Games and Graphics",
  "🎛️ Tcl: Small Syntax, Big Power",
  "🌀 Nim: Bare-Metal Performance with Clean Syntax",
  "🎭 BCPL: The Grandparent of C",
  "🧙 SPARK: Where Security Meets Ada",
  "🎮 Monkey: The Language for Game Development",
  "💡 LuaJIT: The Just-In-Time Wonder for Lua",
  "🧬 Seed7: High-Level Language with Low-Level Control",
  "⚛️ Aldor: The Language for Abstract Algebra",
  "🔍 Icon: Combining High-Level Goals with Procedural Power",
  "🧩 Ceylon: Java’s More Expressive Cousin",
  "🔧 Zig: Control and Safety in One Language",
  "🧠 AutoIt: Automating Windows with Ease",
  "📜 OCaml: The Functional Language with Industrial Impact",
  "🧑‍🎤 Pony: Data Safety Meets Concurrency",
  "🔍 Nial: Array-Oriented Language for Complex Data",
  "🌊 Water: Flow-Based Programming with a Unique Approach",
  "🌀 Hopscotch: Visual Language for Kids, Powerful Concepts",
  "🌈 Xenon: Simple Scripting for Complex Networks",
  "🔧 Pnuts: Java-Based Scripting with Flexibility",
  "🧩 Squirrel: Lightweight Scripting for Games",
  "📊 Q: Financial Data Language for Speed",
  "🌍 Elm: Building UIs with Functional Simplicity"

]

def ai_news():
    if not techTitles:
        print("All topics have been used!")
        return None
    genai.configure(api_key = os.getenv("API_KEY"))


    model = genai.GenerativeModel("gemini-1.5-flash")

    random_index = random.randint(0, len(techTitles) - 1)
    selected_topic = techTitles.pop(random_index)

    response = model.generate_content(f"""Create a Discord-friendly post about an esoteric or niche technology: {selected_topic}. Make sure to vary the format and structure each time you use this prompt. Include the following elements:

    Engaging Title: Choose a creative title that draws attention.
    Brief Overview: Describe what the technology is, its origin, and its key features in a concise manner.
    Why ?: Interesting Aspects, Highlight what makes this technology fascinating or valuable, especially in educational contexts.
    Commands or Features: Present a list or table of essential commands, features, or characteristics that define the technology.
    Famous Example: Provide an example of how the technology is used, perhaps with a notable program or application.
    Final Thoughts: Conclude with a thought-provoking statement about the relevance or implications of this technology in understanding broader programming concepts.
    Link for More Information: Add a reliable source link for readers who want to explore further.
    (add emojis also indent the text better)
    """)

    return print(response.text)

ai_news()